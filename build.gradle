buildscript {

  ext {
    kotlinVersion = "1.0.5"
    springBootVersion = "1.4.2.RELEASE"
    jjwtVersion = "0.7.0"
    gradleNodePluginVersion = "1.0.1"
    reflectionsVersion = "0.9.10"
    typescriptGeneratorVersion = "1.12.236"
  }

  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath group: "org.springframework.boot", name: "spring-boot-gradle-plugin", version: "${springBootVersion}"
    classpath group: "org.jetbrains.kotlin", name: "kotlin-gradle-plugin", version: "${kotlinVersion}"
    classpath group: "com.moowork.gradle", name: "gradle-node-plugin", version: "${gradleNodePluginVersion}"
    classpath group: "cz.habarta.typescript-generator", name: "typescript-generator-gradle-plugin", version: "${typescriptGeneratorVersion}"

  }

}

apply plugin: "java"
apply plugin: "kotlin"
apply plugin: "eclipse"
apply plugin: "org.springframework.boot"
apply plugin: "cz.habarta.typescript-generator"
apply plugin: "com.moowork.node"
apply plugin: "jacoco"

project.version = "0.0.1-SNAPSHOT"
sourceCompatibility = "1.8"
targetCompatibility = "1.8"

node {
  version = "6.9.1"
  npmVersion = "3.10.8"
  yarnVersion = "0.18.1"
  download = true
  workDir = file("${project.buildDir}/nodejs")
  npmWorkDir = file("${project.buildDir}/npm")
  yarnWorkDir = file("${project.buildDir}/yarn")
  nodeModulesDir = file("${project.projectDir}")
}

generateTypeScript {
  jsonLibrary = "jackson2"
  classPatterns = [
    "com.shardis.**.*Dto"
  ]
  outputFile = "${project.buildDir}/../src/main/typescript/app/shared/kotlin.ts"
  outputKind = "global"
  namespace = "Kotlin"
  noFileComment = true
  outputFileType = "implementationFile"
}

jar {
  baseName = "shardis"
  version = project.version
}

test {

  testLogging {
    events "passed", "skipped", "failed", "standardOut", "standardError"
  }

  afterTest { desc, result ->
    println "Executed test ${desc.name} [${desc.className}] with result: ${result.resultType}"
  }

}

jacocoTestReport {
    dependsOn "test"
    reports {
	      html.enabled = true
        xml.enabled = true
        html.destination = "${project.buildDir}/jacocoHtml"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

sourceSets {
  main.java.srcDirs += "src/main/kotlin"
}

processResources {
  filesMatching("**/application.yml") {
    expand(project.properties)
  }
  filesMatching("**/bootstrap.yml") {
    expand(project.properties)
  }
}

configurations {
  compile.exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
}

dependencies {
  compile group: "org.springframework.boot", name: "spring-boot-starter-actuator"
  compile group: "org.springframework.boot", name: "spring-boot-actuator-docs"
  compile group: "org.springframework.boot", name: "spring-boot-starter-cache"
  compile group: "org.springframework.boot", name: "spring-boot-starter-data-jpa"
  compile group: "org.springframework.boot", name: "spring-boot-devtools"
  compile group: "org.springframework.boot", name: "spring-boot-starter-mail"
  compile group: "org.springframework.boot", name: "spring-boot-starter-security"
  compile group: "org.springframework.boot", name: "spring-boot-starter-validation"
  compile group: "org.springframework.boot", name: "spring-boot-starter-undertow"
  compile group: "org.springframework.boot", name: "spring-boot-starter-web"
  compile group: "org.springframework.boot", name: "spring-boot-starter-websocket"
  compile group: "org.springframework.boot", name: "spring-boot-configuration-processor"
  kapt group: "org.springframework.boot", name: "spring-boot-configuration-processor"
  compile group: "org.hibernate", name: "hibernate-java8"
  compile group: "org.hibernate", name: "hibernate-envers"
  compile group: "com.fasterxml.jackson.datatype", name: "jackson-datatype-jsr310"
  compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib", version: "${kotlinVersion}"
  compile group: "io.jsonwebtoken", name: "jjwt", version: "${jjwtVersion}"
  runtime group: "com.h2database", name: "h2"
  runtime group: "org.postgresql", name: "postgresql"
  testCompile group: "org.springframework.boot", name: "spring-boot-starter-test"
  testCompile group: "org.springframework.security", name: "spring-security-test"
  testCompile group: "org.springframework.restdocs", name: "spring-restdocs-mockmvc"
  testCompile group: "org.reflections", name: "reflections", version: "${reflectionsVersion}"
}

task ngBuild(type: YarnTask) {
  args = ["run", "build:prod"]
}

task ngTest(type: YarnTask) {
  args = ["run", "test:phantom"]
}

task ngServer(type: YarnTask) {
  args = ["run", "server:dev"]
}

task ngDocs(type: YarnTask) {
  args = ["run", "docs"]
}

task changelog(type: YarnTask) {
  args = ["run", "changelog"]
}

yarn_install.dependsOn yarnSetup

ngBuild.dependsOn yarn_install
ngTest.dependsOn yarn_install

processResources.dependsOn ngBuild

test.dependsOn ngTest

clean.delete << file("node_modules")

