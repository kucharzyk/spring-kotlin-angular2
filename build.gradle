buildscript {
  ext {
    kotlinVersion = "1.0.4"
    springBootVersion = "1.4.1.RELEASE"
    jjwtVersion = "0.7.0"
    gradleNodePluginVersion = "0.13"
    reflectionsVersion = "0.9.10"
  }
  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
    classpath("com.moowork.gradle:gradle-node-plugin:${gradleNodePluginVersion}")
  }
}

apply plugin: "kotlin"
apply plugin: "eclipse"
apply plugin: "spring-boot"
apply plugin: "com.moowork.node"

project.version = "0.0.1-SNAPSHOT"

node {
  version = "6.9.1"
  npmVersion = "3.10.3"
  download = true
  workDir = file("${project.buildDir}/node")
  nodeModulesDir = file("${project.projectDir}")
}

jar {
  baseName = "shardis"
  version = project.version
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
}

processResources {
  filesMatching("**/application.yml") {
    expand(project.properties)
  }
}

dependencies {
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile("org.springframework.boot:spring-boot-actuator-docs")
  compile("org.springframework.boot:spring-boot-starter-cache")
  compile("org.springframework.boot:spring-boot-starter-data-jpa")
  compile("org.springframework.boot:spring-boot-devtools")
  compile("org.springframework.boot:spring-boot-starter-mail")
  compile("org.springframework.boot:spring-boot-starter-remote-shell")
  compile("org.springframework.retry:spring-retry")
  compile("org.springframework.boot:spring-boot-starter-security")
  compile("org.springframework.boot:spring-boot-starter-validation")
  compile("org.springframework.boot:spring-boot-starter-web")
  compile("org.springframework.boot:spring-boot-starter-websocket")
  compile "org.springframework.boot:spring-boot-configuration-processor"
  kapt "org.springframework.boot:spring-boot-configuration-processor"
  compile "org.hibernate:hibernate-envers"
  compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
  compile("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")
  compile("io.jsonwebtoken:jjwt:${jjwtVersion}")
  compile("org.reflections:reflections:${reflectionsVersion}")
  runtime("com.h2database:h2")
  runtime("org.postgresql:postgresql")
  testCompile("org.springframework.boot:spring-boot-starter-test")
  testCompile("org.springframework.security:spring-security-test")
  testCompile("org.springframework.restdocs:spring-restdocs-mockmvc")
}

task npmBuild(type: NpmTask) {
  args = ["run", "build:prod"]
}

task npmTest(type: NpmTask) {
  args = ["run", "test:phantom"]
}

task npmServer(type: NpmTask) {
  args = ["run", "server:dev"]
}

npmInstall.dependsOn npmSetup

npmBuild.dependsOn npmInstall
npmTest.dependsOn npmInstall

processResources.dependsOn npmBuild

test.dependsOn npmTest

clean.delete << file("node_modules")
sourceSets {
  main.java.srcDirs += 'src/main/kotlin'
}

